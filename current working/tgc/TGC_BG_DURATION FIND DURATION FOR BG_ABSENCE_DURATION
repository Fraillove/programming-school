CREATE OR REPLACE FUNCTION TGC_BG_DURATION(L_ASSIGNMENT_ID            IN NUMBER,
                                           ABSENCE_ATTENDANCE_TYPE_ID IN NUMBER,
                                           DATE_START                 IN DATE,
                                           DATE_END                   IN DATE,
                                           TIME_START                 IN VARCHAR2,
                                           TIME_END                   IN VARCHAR2,
                                           INVALID_MSG                OUT VARCHAR2,
                                           NUMBER_OF_DAYS             OUT NUMBER)

 RETURN VARCHAR2 IS

  duration    VARCHAR2(200) DEFAULT NULL;
  TOTAL_TIME  NUMBER NULL;
  TOTAL_DAYS  NUMBER NULL;
  P_PERSON_ID NUMBER;

BEGIN

  BEGIN
    SELECT DISTINCT PAA.PERSON_ID
      INTO P_PERSON_ID
      FROM PER_ALL_ASSIGNMENTS PAA
     WHERE PAA.ASSIGNMENT_ID = L_ASSIGNMENT_ID;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  ---COUNT DATES
  TOTAL_DAYS := (date_end - date_start) + 1;

  NUMBER_OF_DAYS := TOTAL_DAYS;

  ---  LEAVE IS HALF AND SHORT  THEN
  IF absence_attendance_type_id IN (4062,
                                    4064,
                                    4066,
                                    1062,
                                    2068,
                                    2072,
                                    2075,
                                    2078,
                                    2082,
                                    2084,
                                    2086,
                                    6063,
                                    6064,
                                    6065,
                                    7062,
                                    2065,
                                    2070,
                                    2080,
                                    2083,
                                    2065,
                                    6065) THEN
    ---
    IF TOTAL_DAYS > 1 THEN
      duration    := 'FAILED';
      invalid_msg := 'You cannot enter short/half leave for multiple dates.';
    ELSE
      TOTAL_TIME := ROUND((TO_DATE(TIME_END, 'HH24:MI') -
                          TO_DATE(TIME_START, 'HH24:MI')) * 24,
                          1);
      duration   := TO_CHAR(TOTAL_TIME);
    END IF;
    ---

  ELSE

    TOTAL_DAYS := (date_end - date_start) + 1;
    duration   := TO_CHAR(TOTAL_DAYS);
  END IF;

  /* ================================== SHORT LEAVE CHECK =================== */
  IF absence_attendance_type_id IN (4062,
                                    4064,
                                    4066,
                                    1062,
                                    2068,
                                    2072,
                                    2075,
                                    2078,
                                    2082,
                                    2084,
                                    2086,
                                    6063,
                                    6064,
                                    6065,
                                    7062) and TOTAL_TIME > 2.5 THEN

    duration    := 'FAILED';
    invalid_msg := 'Please enter a short leave with a duration not greater than 2.5 hours.';
  END IF;

  /* ================================== HALF LEAVE CHECK =================== */

  IF absence_attendance_type_id IN (2065, 2070, 2080, 2083) and
     TOTAL_TIME NOT BETWEEN 2.5 AND 4 THEN
    duration    := 'FAILED';
    invalid_msg := 'Please enter a half leave with a duration between 2.5 and 4 hours.';
  END IF;

  /*======================== ABSENCE  EXISTS ON LEAVE START DATE OR END DATE============================ */

  DECLARE
    FL_RESULT NUMBER;

  BEGIN

    SELECT COUNT(*)
      INTO FL_RESULT
      FROM (
            --// APPROVED ABSENCE
            SELECT PAA.PERSON_ID,
                    PAA.ABSENCE_ATTENDANCE_TYPE_ID,
                    PAA.DATE_START                 LEAVE_START_DATE,
                    PAA.DATE_END                   LEAVE_END_DATE,
                    PAA.ABSENCE_DAYS
              FROM PER_ABSENCE_ATTENDANCES PAA
             WHERE 1 = 1
            UNION ALL
            --// ABSENCE IN PROCESS
            SELECT HAT.CREATOR_PERSON_ID,
                    TO_NUMBER(HATS.INFORMATION5),
                    TO_DATE(HATS.INFORMATION1, 'YYYY-MM-DD'),
                    TO_DATE(HATS.INFORMATION2, 'YYYY-MM-DD'),
                    TO_NUMBER(HATS.INFORMATION8)
              FROM HR_API_TRANSACTIONS HAT, HR_API_TRANSACTION_STEPS HATS
             WHERE HAT.TRANSACTION_REF_TABLE = 'PER_ABSENCE_ATTENDANCES'
               AND HAT.TRANSACTION_GROUP = 'ABSENCE_MGMT'
               AND HAT.TRANSACTION_IDENTIFIER = 'ABSENCES'
               AND HAT.TRANSACTION_REF_ID IS NOT NULL
               AND HAT.STATUS = 'Y'
               AND HAT.TRANSACTION_ID = HATS.TRANSACTION_ID) S
     WHERE 1 = 1
       AND s.PERSON_ID = P_PERSON_ID
       AND ((S.LEAVE_START_DATE BETWEEN DATE_START and DATE_END) OR
           (S.LEAVE_END_DATE BETWEEN DATE_START and DATE_END));
    IF FL_RESULT > 0 THEN
      duration    := 'FAILED';
      invalid_msg := 'leave already exists on the given date ';
    END IF;

  END;

  /*=================================== short and half leave =========================== */

  IF absence_attendance_type_id IN (4062,
                                    4064,
                                    4066,
                                    1062,
                                    2068,
                                    2072,
                                    2075,
                                    2078,
                                    2082,
                                    2084,
                                    2086,
                                    6063,
                                    6064,
                                    6065,
                                    7062,
                                    2065,
                                    2070,
                                    2080,
                                    2083,
                                    2065,
                                    6065) THEN

    DECLARE

      L_COUNT NUMBER := 0;

    BEGIN

      SELECT COUNT(*)
        INTO L_COUNT
        FROM HXT_DET_HOURS_WORKED_F DHW, PER_ALL_ASSIGNMENTS_F PAAF
       WHERE 1 = 1
         AND PAAF.ASSIGNMENT_ID = DHW.ASSIGNMENT_ID
         AND SYSDATE BETWEEN PAAF.EFFECTIVE_START_DATE AND
             PAAF.EFFECTIVE_END_DATE
         AND DHW.DATE_WORKED = DATE_START
         AND PAAF.PERSON_ID = TO_CHAR(P_PERSON_ID)
         AND DHW.TIME_IN IS NOT NULL
         AND DHW.TIME_OUT IS NOT NULL;

      IF L_COUNT = 0 THEN
        duration    := 'FAILED';
        invalid_msg := 'Short / half leave only Allow in Present Day';
      END IF;

    end;

  END IF;

  /*=================================MORE THAN TWO CASUAL LEAVES ==============         */

  DECLARE
    L_SD       DATE := DATE_START;
    L_ED       DATE := DATE_END;
    L_CUR_DAYS NUMBER := (L_ED - L_SD) + 1;
    L_LEV_DAYS NUMBER;

    L_FLAG  VARCHAR2(200);
    L_COUNT NUMBER := 0;

    CURSOR CL_LEAVE IS
      SELECT *
        FROM (SELECT PAA.PERSON_ID,
                     PAA.ABSENCE_ATTENDANCE_TYPE_ID,
                     PAA.DATE_START                 LEAVE_START_DATE,
                     PAA.DATE_END                   LEAVE_END_DATE,
                     PAA.ABSENCE_DAYS
                FROM PER_ABSENCE_ATTENDANCES PAA
               WHERE 1 = 1
              UNION ALL
              SELECT HAT.CREATOR_PERSON_ID,
                     TO_NUMBER(HATS.INFORMATION5),
                     TO_DATE(HATS.INFORMATION1, 'YYYY-MM-DD'),
                     TO_DATE(HATS.INFORMATION2, 'YYYY-MM-DD'),
                     TO_NUMBER(HATS.INFORMATION8)
                FROM HR_API_TRANSACTIONS HAT, HR_API_TRANSACTION_STEPS HATS
               WHERE HAT.TRANSACTION_REF_TABLE = 'PER_ABSENCE_ATTENDANCES'
                 AND HAT.TRANSACTION_GROUP = 'ABSENCE_MGMT'
                 AND HAT.TRANSACTION_IDENTIFIER = 'ABSENCES'
                 AND HAT.TRANSACTION_REF_ID IS NOT NULL
                 AND HAT.STATUS = 'Y'
                 AND HAT.TRANSACTION_ID = HATS.TRANSACTION_ID) S
       WHERE 1 = 1
         AND s.PERSON_ID = P_PERSON_ID
         AND s.ABSENCE_ATTENDANCE_TYPE_ID = 2064
       ORDER BY s.LEAVE_START_DATE DESC, s.LEAVE_END_DATE DESC;

  BEGIN

    FOR X IN CL_LEAVE LOOP
      EXIT WHEN L_FLAG = 'F';

      L_LEV_DAYS := X.LEAVE_END_DATE - X.LEAVE_START_DATE + 1;

      IF L_CUR_DAYS = 1 THEN
        ---- PAST DATE AND NUMBER OF DAYS TWO
        IF X.LEAVE_END_DATE = L_SD - 1 AND L_LEV_DAYS = 2 THEN
          L_FLAG := 'F';
        END IF;
        ---- PAST DATE AND NUMBER OF DAYS TWO
        IF X.LEAVE_START_DATE = L_SD + 1 AND L_LEV_DAYS = 2 THEN
          L_FLAG := 'F';
        END IF;

        ----- LEAVE IN PAST TWO DAYS SO
        IF X.LEAVE_END_DATE IN (L_SD - 1, L_SD - 2) THEN
          L_COUNT := L_COUNT + 1;
          IF L_COUNT = 2 THEN
            L_FLAG := 'F';
          END IF;
        END IF;

        --- RESET_VALUE
        IF L_COUNT != 2 THEN
          L_COUNT := 0;
        END IF;

        ----- LEAVE IN FEATURE TWO DAYS SO
        IF X.LEAVE_START_DATE IN (L_SD + 1, L_SD + 2) THEN
          L_COUNT := L_COUNT + 1;
          IF L_COUNT = 2 THEN
            L_FLAG := 'F';
          END IF;
        END IF;
        ---- PAST DATE AND FEATURE  DAYS AS LEAVE
        IF X.LEAVE_END_DATE = L_SD - 1 OR X.LEAVE_START_DATE = L_SD + 1 THEN

          L_COUNT := L_COUNT + 1;
          IF L_COUNT = 2 THEN
            L_FLAG := 'F';
          END IF;

        END IF;

        --- USER APPLY FOR TWO LEAVES
      ELSIF L_CUR_DAYS = 2 THEN

        ---- CURRENT LEAVE FOR 2 DAYS   AND LAST DAY WAS LEAVE OR FEATURE DAY IS LEAVE
        IF L_SD = X.LEAVE_END_DATE + 1 OR L_ED = X.LEAVE_START_DATE - 1 THEN
          L_FLAG := 'F';
        END IF;

      END IF;

    END LOOP;

    IF L_FLAG = 'F' THEN
      duration    := 'FAILED';
      invalid_msg := 'Only 2 Casual Leaves Allowed';

    END IF;

  EXCEPTION
    WHEN no_data_found THEN
      NULL;

  END;

  --==================================================================================

  RETURN duration;

END;
